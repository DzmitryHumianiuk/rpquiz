---
meta:
  image: "quay.io/avarabyeu/rpquiz"
  port: "4200"

resource_types:
- name: ssh
  type: docker-image
  source:
    repository: quay.io/avarabyeu/concourse-ssh-resource

resources:
- name: rpquiz-git
  type: git
  source:
    uri: https://github.com/avarabyeu/rpquiz.git
    branch: master

- name: go-base
  type: docker-image
  source:
    repository: golang
    tag: 1.11-alpine

- name: python-base
  type: docker-image
  source:
    repository: python
    tag: 3.6-alpine


- name: rpquiz-docker-image
  type: docker-image
  source:
    repository: quay.io/avarabyeu/rpquiz
    username: ((docker_login))
    password: ((docker_pass))

- name: staging-server
  type: ssh
  source:
    host: ((deploy_host))
    user: ((deploy_host_user))
    password: ((deploy_host_password))

jobs:
- name: build
#  public: true
#  serial: true
  plan:
  - get: go-base
    params: {save: true}
  - get: python-base
    params: {save: true}
  - get: rpquiz-git
    trigger: true
  - put: rpquiz-docker-image
    get_params: { skip_download: true }
    params:
      load_bases: [go-base,python-base]
#      cache: true
      params: {save: true}
      build: rpquiz-git
      dockerfile: rpquiz-git/DockerfileProd

- name: Deploy
  plan:
  - get: rpquiz-docker-image
    trigger: true
    # Only if build job has passed
    passed: [build]
  - put: staging-server
    params:
      interpreter: /bin/sh
      #        echo "<docker_pass>" | docker login -u "<docker_login>" quay.io/avarabyeu/rpquiz --password-stdin
      script: |
        docker pull "<image>"
        docker rm -f rpquiz || true
        docker run -d -p "<deploy_port>":"<deploy_port>" --restart=always --name rpquiz -e RP_PROJECT="<rp_project>" -e RP_UUID="<rp_uuid>" -e TG_TOKEN="<telegram_token>" "<image>"
      placeholders:
      - name: "<telegram_token>"
        value: ((telegram_token))
      - name: "<image>"
        value:  ((image))
      - name: "<deploy_port>"
        value: ((deploy_port))
      - name: "<rp_uuid>"
        value: ((rp_uuid))
      - name: "<rp_project>"
        value: ((rp_project))

- name: Test
  plan:
  - get: staging-server
    trigger: true
    passed: [Deploy]
  - task: run_test
    params:
      DEPLOY_HOST: ((deploy_host)
      DEPLOY_PORT: ((deploy_port)
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: willena/alpine-httpie-jq
          tag: "latest"
      run:
        path: sh
        args:
        - -exc
        - |
          http http://${DEPLOY_HOST}:${DEPLOY_PORT}/health | jq -e '[.status == "ok"] | any' >/dev/null